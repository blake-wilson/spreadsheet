// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.spreadsheet.Cell', null, global);
goog.exportSymbol('proto.spreadsheet.GetCellsRequest', null, global);
goog.exportSymbol('proto.spreadsheet.GetCellsResponse', null, global);
goog.exportSymbol('proto.spreadsheet.InsertCell', null, global);
goog.exportSymbol('proto.spreadsheet.InsertCellsRequest', null, global);
goog.exportSymbol('proto.spreadsheet.InsertCellsResponse', null, global);
goog.exportSymbol('proto.spreadsheet.Rect', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spreadsheet.Rect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spreadsheet.Rect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spreadsheet.Rect.displayName = 'proto.spreadsheet.Rect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spreadsheet.InsertCell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spreadsheet.InsertCell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spreadsheet.InsertCell.displayName = 'proto.spreadsheet.InsertCell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spreadsheet.Cell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spreadsheet.Cell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spreadsheet.Cell.displayName = 'proto.spreadsheet.Cell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spreadsheet.InsertCellsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spreadsheet.InsertCellsRequest.repeatedFields_, null);
};
goog.inherits(proto.spreadsheet.InsertCellsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spreadsheet.InsertCellsRequest.displayName = 'proto.spreadsheet.InsertCellsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spreadsheet.InsertCellsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spreadsheet.InsertCellsResponse.repeatedFields_, null);
};
goog.inherits(proto.spreadsheet.InsertCellsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spreadsheet.InsertCellsResponse.displayName = 'proto.spreadsheet.InsertCellsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spreadsheet.GetCellsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spreadsheet.GetCellsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spreadsheet.GetCellsRequest.displayName = 'proto.spreadsheet.GetCellsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spreadsheet.GetCellsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spreadsheet.GetCellsResponse.repeatedFields_, null);
};
goog.inherits(proto.spreadsheet.GetCellsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spreadsheet.GetCellsResponse.displayName = 'proto.spreadsheet.GetCellsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spreadsheet.Rect.prototype.toObject = function(opt_includeInstance) {
  return proto.spreadsheet.Rect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spreadsheet.Rect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.Rect.toObject = function(includeInstance, msg) {
  var f, obj = {
    startRow: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startCol: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stopRow: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stopCol: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spreadsheet.Rect}
 */
proto.spreadsheet.Rect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spreadsheet.Rect;
  return proto.spreadsheet.Rect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spreadsheet.Rect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spreadsheet.Rect}
 */
proto.spreadsheet.Rect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartCol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStopRow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStopCol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spreadsheet.Rect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spreadsheet.Rect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spreadsheet.Rect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.Rect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartRow();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStartCol();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStopRow();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStopCol();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 start_row = 1;
 * @return {number}
 */
proto.spreadsheet.Rect.prototype.getStartRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.spreadsheet.Rect} returns this
 */
proto.spreadsheet.Rect.prototype.setStartRow = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 start_col = 2;
 * @return {number}
 */
proto.spreadsheet.Rect.prototype.getStartCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.spreadsheet.Rect} returns this
 */
proto.spreadsheet.Rect.prototype.setStartCol = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 stop_row = 3;
 * @return {number}
 */
proto.spreadsheet.Rect.prototype.getStopRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.spreadsheet.Rect} returns this
 */
proto.spreadsheet.Rect.prototype.setStopRow = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 stop_col = 4;
 * @return {number}
 */
proto.spreadsheet.Rect.prototype.getStopCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.spreadsheet.Rect} returns this
 */
proto.spreadsheet.Rect.prototype.setStopCol = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spreadsheet.InsertCell.prototype.toObject = function(opt_includeInstance) {
  return proto.spreadsheet.InsertCell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spreadsheet.InsertCell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.InsertCell.toObject = function(includeInstance, msg) {
  var f, obj = {
    row: jspb.Message.getFieldWithDefault(msg, 1, 0),
    col: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spreadsheet.InsertCell}
 */
proto.spreadsheet.InsertCell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spreadsheet.InsertCell;
  return proto.spreadsheet.InsertCell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spreadsheet.InsertCell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spreadsheet.InsertCell}
 */
proto.spreadsheet.InsertCell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spreadsheet.InsertCell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spreadsheet.InsertCell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spreadsheet.InsertCell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.InsertCell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCol();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 row = 1;
 * @return {number}
 */
proto.spreadsheet.InsertCell.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.spreadsheet.InsertCell} returns this
 */
proto.spreadsheet.InsertCell.prototype.setRow = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 col = 2;
 * @return {number}
 */
proto.spreadsheet.InsertCell.prototype.getCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.spreadsheet.InsertCell} returns this
 */
proto.spreadsheet.InsertCell.prototype.setCol = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.spreadsheet.InsertCell.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.spreadsheet.InsertCell} returns this
 */
proto.spreadsheet.InsertCell.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spreadsheet.Cell.prototype.toObject = function(opt_includeInstance) {
  return proto.spreadsheet.Cell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spreadsheet.Cell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.Cell.toObject = function(includeInstance, msg) {
  var f, obj = {
    row: jspb.Message.getFieldWithDefault(msg, 1, 0),
    col: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    displayValue: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spreadsheet.Cell}
 */
proto.spreadsheet.Cell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spreadsheet.Cell;
  return proto.spreadsheet.Cell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spreadsheet.Cell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spreadsheet.Cell}
 */
proto.spreadsheet.Cell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spreadsheet.Cell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spreadsheet.Cell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spreadsheet.Cell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.Cell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCol();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDisplayValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 row = 1;
 * @return {number}
 */
proto.spreadsheet.Cell.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.spreadsheet.Cell} returns this
 */
proto.spreadsheet.Cell.prototype.setRow = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 col = 2;
 * @return {number}
 */
proto.spreadsheet.Cell.prototype.getCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.spreadsheet.Cell} returns this
 */
proto.spreadsheet.Cell.prototype.setCol = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.spreadsheet.Cell.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.spreadsheet.Cell} returns this
 */
proto.spreadsheet.Cell.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string display_value = 4;
 * @return {string}
 */
proto.spreadsheet.Cell.prototype.getDisplayValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.spreadsheet.Cell} returns this
 */
proto.spreadsheet.Cell.prototype.setDisplayValue = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spreadsheet.InsertCellsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spreadsheet.InsertCellsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spreadsheet.InsertCellsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spreadsheet.InsertCellsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.InsertCellsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cellsList: jspb.Message.toObjectList(msg.getCellsList(),
    proto.spreadsheet.InsertCell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spreadsheet.InsertCellsRequest}
 */
proto.spreadsheet.InsertCellsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spreadsheet.InsertCellsRequest;
  return proto.spreadsheet.InsertCellsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spreadsheet.InsertCellsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spreadsheet.InsertCellsRequest}
 */
proto.spreadsheet.InsertCellsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spreadsheet.InsertCell;
      reader.readMessage(value,proto.spreadsheet.InsertCell.deserializeBinaryFromReader);
      msg.addCells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spreadsheet.InsertCellsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spreadsheet.InsertCellsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spreadsheet.InsertCellsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.InsertCellsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.spreadsheet.InsertCell.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InsertCell cells = 1;
 * @return {!Array<!proto.spreadsheet.InsertCell>}
 */
proto.spreadsheet.InsertCellsRequest.prototype.getCellsList = function() {
  return /** @type{!Array<!proto.spreadsheet.InsertCell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spreadsheet.InsertCell, 1));
};


/**
 * @param {!Array<!proto.spreadsheet.InsertCell>} value
 * @return {!proto.spreadsheet.InsertCellsRequest} returns this
*/
proto.spreadsheet.InsertCellsRequest.prototype.setCellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.spreadsheet.InsertCell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spreadsheet.InsertCell}
 */
proto.spreadsheet.InsertCellsRequest.prototype.addCells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.spreadsheet.InsertCell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spreadsheet.InsertCellsRequest} returns this
 */
proto.spreadsheet.InsertCellsRequest.prototype.clearCellsList = function() {
  return this.setCellsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spreadsheet.InsertCellsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spreadsheet.InsertCellsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spreadsheet.InsertCellsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spreadsheet.InsertCellsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.InsertCellsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cellsList: jspb.Message.toObjectList(msg.getCellsList(),
    proto.spreadsheet.Cell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spreadsheet.InsertCellsResponse}
 */
proto.spreadsheet.InsertCellsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spreadsheet.InsertCellsResponse;
  return proto.spreadsheet.InsertCellsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spreadsheet.InsertCellsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spreadsheet.InsertCellsResponse}
 */
proto.spreadsheet.InsertCellsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spreadsheet.Cell;
      reader.readMessage(value,proto.spreadsheet.Cell.deserializeBinaryFromReader);
      msg.addCells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spreadsheet.InsertCellsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spreadsheet.InsertCellsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spreadsheet.InsertCellsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.InsertCellsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.spreadsheet.Cell.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Cell cells = 1;
 * @return {!Array<!proto.spreadsheet.Cell>}
 */
proto.spreadsheet.InsertCellsResponse.prototype.getCellsList = function() {
  return /** @type{!Array<!proto.spreadsheet.Cell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spreadsheet.Cell, 1));
};


/**
 * @param {!Array<!proto.spreadsheet.Cell>} value
 * @return {!proto.spreadsheet.InsertCellsResponse} returns this
*/
proto.spreadsheet.InsertCellsResponse.prototype.setCellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.spreadsheet.Cell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spreadsheet.Cell}
 */
proto.spreadsheet.InsertCellsResponse.prototype.addCells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.spreadsheet.Cell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spreadsheet.InsertCellsResponse} returns this
 */
proto.spreadsheet.InsertCellsResponse.prototype.clearCellsList = function() {
  return this.setCellsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spreadsheet.GetCellsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spreadsheet.GetCellsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spreadsheet.GetCellsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.GetCellsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    rect: (f = msg.getRect()) && proto.spreadsheet.Rect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spreadsheet.GetCellsRequest}
 */
proto.spreadsheet.GetCellsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spreadsheet.GetCellsRequest;
  return proto.spreadsheet.GetCellsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spreadsheet.GetCellsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spreadsheet.GetCellsRequest}
 */
proto.spreadsheet.GetCellsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spreadsheet.Rect;
      reader.readMessage(value,proto.spreadsheet.Rect.deserializeBinaryFromReader);
      msg.setRect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spreadsheet.GetCellsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spreadsheet.GetCellsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spreadsheet.GetCellsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.GetCellsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRect();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spreadsheet.Rect.serializeBinaryToWriter
    );
  }
};


/**
 * optional Rect rect = 1;
 * @return {?proto.spreadsheet.Rect}
 */
proto.spreadsheet.GetCellsRequest.prototype.getRect = function() {
  return /** @type{?proto.spreadsheet.Rect} */ (
    jspb.Message.getWrapperField(this, proto.spreadsheet.Rect, 1));
};


/**
 * @param {?proto.spreadsheet.Rect|undefined} value
 * @return {!proto.spreadsheet.GetCellsRequest} returns this
*/
proto.spreadsheet.GetCellsRequest.prototype.setRect = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spreadsheet.GetCellsRequest} returns this
 */
proto.spreadsheet.GetCellsRequest.prototype.clearRect = function() {
  return this.setRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spreadsheet.GetCellsRequest.prototype.hasRect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spreadsheet.GetCellsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spreadsheet.GetCellsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spreadsheet.GetCellsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spreadsheet.GetCellsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.GetCellsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cellsList: jspb.Message.toObjectList(msg.getCellsList(),
    proto.spreadsheet.Cell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spreadsheet.GetCellsResponse}
 */
proto.spreadsheet.GetCellsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spreadsheet.GetCellsResponse;
  return proto.spreadsheet.GetCellsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spreadsheet.GetCellsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spreadsheet.GetCellsResponse}
 */
proto.spreadsheet.GetCellsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spreadsheet.Cell;
      reader.readMessage(value,proto.spreadsheet.Cell.deserializeBinaryFromReader);
      msg.addCells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spreadsheet.GetCellsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spreadsheet.GetCellsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spreadsheet.GetCellsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spreadsheet.GetCellsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.spreadsheet.Cell.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Cell cells = 1;
 * @return {!Array<!proto.spreadsheet.Cell>}
 */
proto.spreadsheet.GetCellsResponse.prototype.getCellsList = function() {
  return /** @type{!Array<!proto.spreadsheet.Cell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spreadsheet.Cell, 1));
};


/**
 * @param {!Array<!proto.spreadsheet.Cell>} value
 * @return {!proto.spreadsheet.GetCellsResponse} returns this
*/
proto.spreadsheet.GetCellsResponse.prototype.setCellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.spreadsheet.Cell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spreadsheet.Cell}
 */
proto.spreadsheet.GetCellsResponse.prototype.addCells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.spreadsheet.Cell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spreadsheet.GetCellsResponse} returns this
 */
proto.spreadsheet.GetCellsResponse.prototype.clearCellsList = function() {
  return this.setCellsList([]);
};


goog.object.extend(exports, proto.spreadsheet);
